@license{
Copyright (c) 2018-2025, NWO-I CWI and Swat.engineering
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
}
@bootstrapParser
module lang::rascal::lsp::refactor::Rename

/**
 * Rename refactoring
 *
 * Implements rename refactoring according to the LSP.
 * Renaming collects information generated by the typechecker for the module/workspace, finds all definitions and
 * uses matching the position of the cursor, and computes file changes needed to rename these to the user-input name.
 */

import Exception;
import IO;
import Grammar;
import List;
import Location;
import Map;
import ParseTree;
import Relation;
import Set;
import String;

import lang::rascal::\syntax::Rascal;

import lang::rascalcore::check::Checker;
import lang::rascalcore::check::BasicRascalConfig;

import lang::rascal::lsp::refactor::rename::Common;
import lang::rascal::lsp::refactor::rename::Constructors;
import lang::rascal::lsp::refactor::rename::Fields;
import lang::rascal::lsp::refactor::rename::Functions;
import lang::rascal::lsp::refactor::rename::Grammars;
import lang::rascal::lsp::refactor::rename::Modules;
import lang::rascal::lsp::refactor::rename::Parameters;
import lang::rascal::lsp::refactor::rename::Types;
import lang::rascal::lsp::refactor::rename::Variables;

extend framework::Rename;
import util::Util;

import util::FileSystem;
import util::LanguageServer;
import util::Maybe;
import util::Reflective;

void rascalCheckCausesCaptures(set[Define] currentDefs, str newName, Tree tr, TModel tm, Renamer r) {
    defUse = invert(tm.useDef);

    set[loc] uses = defUse[currentDefs.defined] - currentDefs.defined;
    set[Define] newNameDefs = {nD | Define nD:<_, newName, _, _, _, _> <- tm.defines};

    set[loc] maybeImplicitDefs = {n.names[-1].src | /QualifiedName n := tr};
    set[Define] newNameImplicitDefs = {def | Define def <- newNameDefs
                                           , (def.idRole is variableId && def.defined in tm.useDef<0>)
                                          || (def.idRole is patternVariableId && def.defined in maybeImplicitDefs)};

    // Will this rename turn an implicit declaration of `newName` into a use of a current declaration?
    rel[loc, loc] implicitDeclBecomesUseOfCurrentDecl =
        {<cD, nD.defined> | Define nD <- newNameImplicitDefs
                          , loc cD <- currentDefs.defined
                          , isContainedInScope(nD.defined, tm.definitions[cD].scope, tm)
        };
    for (<d, u> <- implicitDeclBecomesUseOfCurrentDecl) {
        r.error(d, "Renaming this declaration to <newName> will change the program semantics; this implicit declaration will become a use: <u>.");
    }

    // Will this rename hide a used definition of `oldName` behind an existing definition of `newName` (shadowing)?
    rel[loc, loc] currentUseShadowedByRename =
        {<nD.defined, cU> | Define nD <- newNameDefs
                          , <cU, cS> <- ident(uses) o tm.useDef o tm.defines<defined, scope>
                          , isContainedInScope(cU, nD.scope, tm)
                          , isContainedInScope(nD.scope, cS, tm)
        };
    for (<d, u> <- currentUseShadowedByRename) {
        r.error(u, "Renaming this use to <newName> would change the program semantics; its original definition would be shadowed by <d>.");
    }

    // Will this rename hide a used definition of `newName` behind a definition of `oldName` (shadowing)?
    rel[loc, loc] newUseShadowedByRename =
        {<cD, nU> | Define nD <- newNameDefs
                  , Define _:<cS, _, _, _, cD, _> <- currentDefs
                  , isContainedInScope(cS, nD.scope, tm)
                  , loc nU <- defUse[nD.defined]
                  , isContainedInScope(nU, cS, tm)
        };
    for (<d, u> <- newUseShadowedByRename) {
        r.error(d, "Renaming this declaration to <newName> would change the program semantics; it would shadow the declaration of <u>.");
    }

    // Will this rename combine a used definition of `newName` with a definition of `oldName` (overloading)?
    reachable = rascalGetReflexiveModulePaths(tm).to;
    // Since the newNameDefs are not necessarily in this TModel, constuct a temporary map for the overloading check
    definitions = (d.defined: d | d <- currentDefs + newNameDefs);
    for (<loc nD, Define c> <- newNameDefs.defined * currentDefs
       , c.scope in reachable && rascalMayOverload({nD, c.defined}, definitions)
       , loc nU <- defUse[nD]) {
        r.error(c.defined, "Renaming this declaration to <newName> would change the program semantics; it would overload the declaration of <nU> at <nD>");
    }
}

void rascalCheckLegalNameByRole(Define _:<_, _, _, role, at, _>, str name, Renamer r) {
    escName = reEscape(name);
    <t, desc> = asType(role);
    if (tryParseAs(t, escName) is nothing) {
        r.error(at, "<escName> is not a valid <desc>");
    }
}

void rascalCheckCausesDoubleDeclarations(Define cD, str newName, TModel tm, Renamer r) {
    set[Define] newNameDefs = {def | Define def:<_, newName, _, _, _, _> <- tm.defines};

    // Is newName already resolvable from a scope where <current-name> is currently declared?
    for (Define nD <- newNameDefs) {
        if (rascalMayOverload({cD.defined, nD.defined}, (d.defined: d | Define d <- {cD, nD}))) {
            // Overloading
            if (isContainedInScope(cD.defined, nD.scope, tm) || isContainedInScope(nD.defined, cD.scope, tm)) {
                r.error(cD.defined, "Cannot rename to \'<newName>\', since this would overload an existing definition at <nD.defined>.");
            }
        } else if (isContainedInScope(cD.defined, nD.scope, tm)) {
            // Double declarations
            r.error(cD.defined, "Cannot rename to \'<newName>\', since this would clash with an existing definition at <nD.defined>.");
        }
    }

    if (isFieldRole(cD.idRole)) {
        for (Define dataDef <- findAdditionalDataLikeDefinitions({cD}, tm, r)
           , loc nD <- (newNameDefs<idRole, defined>)[{fieldId(), keywordFieldId()}] & (tm.defines<idRole, scope, defined>)[{fieldId(), keywordFieldId()}, dataDef.defined]
        ) {
            r.error(cD.defined, "Cannot rename to \'<newName>\', since this would clash with an existing definition at <nD>.");
        }
    }
}

void rascalCheckDefinitionOutsideWorkspace(Define d, Renamer r) {
    f = d.defined.top;
    pcfg = r.getConfig().getPathConfig(f);
    if (!any(srcFolder <- pcfg.srcs, isPrefixOf(srcFolder, f))) {
        r.error(d.defined, "Since this definition is not in the sources of open projects, it cannot be renamed.");
    }
}

@synopsis{Rename the Rascal symbol under the cursor. Renames all related (overloaded) definitions and uses of those definitions.}
@description {
    Rename the Rascal symbol under the cursor, across all currently open projects in the workspace.

    The following symbols are currently unsupported.
    - Annotations (on functions)

    *Name resolution*
    A renaming triggers the typechecker on the currently open file to determine the scope of the renaming.
    If the renaming is not function-local, it might trigger the type checker on all files in the workspace to find rename candidates.
    A renaming requires all files in which the name is used to be without errors.

    *Overloading*
    Considers recognizes overloaded definitions and renames those as well.

    Functions are considered overloaded when they have the same name, even when the arity or type signature differ.
    This means that the following functions defitions will be renamed in unison:
    ```
    list[&T] concat(list[&T] _, list[&T] _) = _;
    set[&T] concat(set[&T] _, set[&T] _) = _;
    set[&T] concat(set[&T] _, set[&T] _, set[&T] _) = _;
    ```

    ADT and grammar definitions are considered overloaded when they have the same name and type, and
    there is a common use from which they are reachable.
    As an example, modules `A` and `B` have a definition for ADT `D`:
    ```
    module A
    data D = a();
    ```
    ```
    module B
    data D = b();
    ```
    With no other modules in the workspace, renaming `D` in one of those modules, will not rename `D` in
    the other module, as they are not considered an overloaded definition. However, if a third module `C`
    exists, that imports both and uses the definition, the definitions will be considered overloaded, and
    renaming `D` from either module `A`, `B` or `C` will result in renaming all occurrences.
    ```
    module C
    import A;
    import B;
    D f() = a();
    ```

    *Validity checking*
    Once all rename candidates have been resolved, validity of the renaming will be checked. A rename is valid iff
    1. It does not introduce parse errors.
    2. It does not introduce type errors.
    3. It does not change the semantics of the application.
    4. It does not change definitions outside of the current workspace.
}

alias Edits = tuple[list[DocumentEdit], set[Message]];

Tree findCursorInTree(Tree t, loc cursorLoc) {
    top-down visit (t) {
        case Name n: if (isContainedIn(n.src, cursorLoc)) return n;
        case Nonterminal n: if (isContainedIn(n.src, cursorLoc)) return n;
        case NonterminalLabel n: if (isContainedIn(n.src, cursorLoc)) return n;
    }
    return t;
}

@synopsis{Due to how the focus list is computed and the grammar for concrete syntax, we cannot easily find the exact name that the cursor is at.}
list[Tree] extendFocusWithConcreteSyntax([Concrete c, *tail], loc cursorLoc) = [findCursorInTree(c, cursorLoc), c, *tail];
default list[Tree] extendFocusWithConcreteSyntax(list[Tree] cursor, loc _) = cursor;

@synopsis{
    Augment the TModel with 'missing' use/def information.
    Workaround until the typechecker generates this. https://github.com/usethesource/rascal/issues/2172
}
TModel augmentTModel(loc l, TModel tm, PathConfig(loc) getPathConfig) {
    TModel getModel(loc f) = f.top == l.top ? tm : tmodelForLoc(f, getPathConfig);

    try {
        tr = parseModuleWithSpaces(l);
        tm = augmentExceptProductions(tr, tm, getModel);
        tm = augmentFieldUses(tr, tm, getModel);
        tm = augmentFormalUses(tr, tm, getModel);
        tm = augmentTypeParams(tr, tm);
    } catch _: {;}
    return tm;
}


TModel tmodelForTree(Tree tr, PathConfig(loc) getPathConfig)
    = tmodelForLoc(tr.src.top, getPathConfig);

TModel tmodelForLoc(loc l, PathConfig(loc) getPathConfig) {
    pcfg = getPathConfig(l);
    mname = getModuleName(l, pcfg);

    ccfg = rascalCompilerConfig(pcfg);
    ms = rascalTModelForNames([mname], ccfg, dummy_compile1);

    <found, tm, ms> = getTModelForModule(mname, ms);
    if (!found) throw "No TModel for module \'<mname>\'";
    return tm;
}

public Edits rascalRenameSymbol(loc cursorLoc, list[Tree] cursor, str newName, set[loc] workspaceFolders, PathConfig(loc) getPathConfig) = rename(
    extendFocusWithConcreteSyntax(cursor, cursorLoc)
  , newName
  , rconfig(
        Tree(loc l) { return parseModuleWithSpaces(l); }
      , TModel(Tree t) { tm = tmodelForTree(t, getPathConfig); return augmentTModel(t.src, tm, getPathConfig); }
      , tmodelForLoc = TModel(loc l) { tm = tmodelForLoc(l, getPathConfig); return augmentTModel(l, tm, getPathConfig); }
      , workspaceFolders = workspaceFolders
      , getPathConfig = getPathConfig
      , debug = false
  )
);

public Edits rascalRenameModule(list[tuple[loc old, loc new]] renames, set[loc] workspaceFolders, PathConfig(loc) getPathConfig) =
    propagateModuleRenames(renames, workspaceFolders, getPathConfig);

set[Define] getCursorDefinitions(list[Tree] cursor, Tree(loc) getTree, TModel(Tree) getModel, Renamer r) {
    if (isUnsupportedCursor(cursor, r)) return {};

    loc cursorLoc = cursor[0].src;
    TModel tm = getModel(cursor[-1]);
    if (isUnsupportedCursor(cursor, tm, r)) return {};

    set[Define] cursorDefs = {};
    if (Tree c <- cursor) {
        if (tm.definitions[c.src]?) {
            // Cursor at definition
            cursorDefs = {tm.definitions[c.src]};
        } else if (useDefs: {_, *_} := tm.useDef[c.src]) {
            // Cursor at use
            cursorDefs = {defTm.definitions[d] | loc d <- useDefs, defTm := getModel(getTree(d.top))};
        } else {
            // Try next cursor candidate in focus list
            fail;
        }
    }

    if ({} := cursorDefs) {
        r.error(cursorLoc, "Could not find definition to rename.");
    } else if (isUnsupportedCursor(cursor, cursorDefs, tm, r)) {
        return {};
    }
    return cursorDefs;
}

tuple[set[loc], set[loc], set[loc]] findOccurrenceFiles(set[Define] defs, list[Tree] cursor, str newName, Tree(loc) getTree, Renamer r) {
    escNewName = reEscape(newName);
    for (role <- defs.idRole) {
        hasError = false;
        <t, desc> = asType(role);
        if (tryParseAs(t, escNewName) is nothing) {
            hasError = true;
            r.error(cursor[0], "\'<escNewName>\' is not a valid <desc>");
        }

        if (hasError) return <{}, {}, {}>;
    }

    return findOccurrenceFilesUnchecked(defs, cursor, escNewName, getTree, r);
}

void validateNewNameOccurrences(set[Define] cursorDefs, str newName, Tree tr, Renamer r) {
    tm = r.getConfig().tmodelForTree(tr);
    rascalCheckCausesCaptures(cursorDefs, newName, tr, tm, r);
    for (d <- cursorDefs) {
        rascalCheckCausesDoubleDeclarations(d, newName, tm, r);
    }
}

default void renameDefinitionUnchecked(Define _, loc nameLoc, str newName, Renamer r) {
    r.textEdit(replace(nameLoc, newName));
}

void renameDefinition(Define d, loc nameLoc, str newName, TModel _, Renamer r) {
    rascalCheckLegalNameByRole(d, newName, r);
    rascalCheckDefinitionOutsideWorkspace(d, r);

    renameDefinitionUnchecked(d, nameLoc, reEscape(newName), r);
}

private loc nameSuffix(loc l, set[Define] defs, Renamer r) {
    if ({str id} := defs.id) {
        if (l.length == size(id)) return l;
        if ({moduleId()} := defs.idRole) return l;
        return trim(l, removePrefix = l.length - size(id));
    }

    r.error(l, "Cannot perform rename - definitions for this use have multiple names.");
    return l;
}

void renameUses(set[Define] defs, str newName, TModel tm, Renamer r) {
    escName = reEscape(newName);

    definitions = {<d.defined, d> | d <- defs};
    useDefs = toMap(tm.useDef o definitions);
    for (loc u <- useDefs) {
        if (set[Define] ds:{_, *_} := useDefs[u], u notin defs.defined) {
            r.textEdit(replace(nameSuffix(u, ds, r), escName));
        }
    }

    renameAdditionalUses(defs, escName, tm, r);
}
